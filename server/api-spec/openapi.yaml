openapi: 3.0.0
info:
  title: Stories API
  description: API for managing stories in the application.
  version: "1.0.0"
servers:
- url: https://dev.entwye.com/v1
  description: Development server
- url: http://localhost:3001/v1
  description: Local server
paths:
  /getStorylinePrompts/{storylineId}:
    get:
      summary: Get storyline prompts by ID
      description: Returns the prompts for a given storyline ID
      parameters:
      - in: path
        name: storylineId
        required: true
        schema:
          type: string
        description: The ID of the storyline to fetch prompts for
      responses:
        '200':
          description: Successfully retrieved storyline prompts
        '401':
          description: Unauthorized, valid token is required
        '404':
          description: Storyline not found
  /moments/upload/complete-multipart-upload:
    post:
      tags:
      - Moments
      summary: Complete multipart upload
      description: Completes a multipart upload and triggers subsequent middleware.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  description: The key of the object being uploaded.
                  example: my-uploaded-file.txt
                uploadId:
                  type: string
                  description: The upload ID of the multipart upload.
                  example: 1a2b3c4d5e6f7g8h9i0j
                parts:
                  type: array
                  description: List of parts with their ETags and part numbers.
                  items:
                    type: object
                    properties:
                      ETag:
                        type: string
                        description: The ETag of the part.
                        example: "d41d8cd98f00b204e9800998ecf8427e"
                      PartNumber:
                        type: integer
                        description: The part number.
                        example: 1
                momentId:
                  type: string
                  description: The ID of the moment.
                  example: 12345
                mimeType:
                  type: string
                  description: The MIME type of the uploaded file.
                  example: image/jpeg
              required:
              - key
              - uploadId
              - parts
              - momentId
              - mimeType
      responses:
        '200':
          description: Multipart upload completed and moment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                    example: Multipart upload completed and moment updated successfully.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
                    example: Internal server error
  /moments/upload/list-parts:
    post:
      tags:
      - Moments
      summary: List parts of a multipart upload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  description: The key (filename) for the object.
                uploadId:
                  type: string
                  description: The upload ID of the multipart upload.
              required:
              - key
              - uploadId
      responses:
        '200':
          description: Successfully listed parts
          content:
            application/json:
              schema:
                type: object
                properties:
                  parts:
                    type: array
                    items:
                      type: object
                      properties:
                        PartNumber:
                          type: integer
                        ETag:
                          type: string
                        Size:
                          type: integer
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /moments/get-multipart-presigned-url:
    post:
      tags:
      - Moments
      summary: Get presigned URL for multipart upload part
      description: Returns a presigned URL for uploading a part in a multipart upload.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  description: The key of the object being uploaded.
                  example: my-uploaded-file.txt
                uploadId:
                  type: string
                  description: The upload ID of the multipart upload.
                  example: 1a2b3c4d5e6f7g8h9i0j
                partNumber:
                  type: integer
                  description: The part number of the multipart upload.
                  example: 1
                  minimum: 1
                  maximum: 10000
              required:
              - key
              - uploadId
              - partNumber
      responses:
        '200':
          description: Presigned URL for the specified part
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: The presigned URL for the specified part.
                    example: https://example-bucket.s3.amazonaws.com/my-uploaded-file.txt?partNumber=1&uploadId=1a2b3c4d5e6f7g8h9i0j&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN7EXAMPLE%2F20210315%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210315T000000Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=EXAMPLESIGNATURE
        '400':
          description: Invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
                    example: partNumber must be between 1 and 10,000
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
                    example: Internal server error
  /moments/initiate-multipart-upload/{promptId}:
    post:
      tags:
      - Moments
      summary: Initiate a multipart upload
      parameters:
      - name: promptId
        in: path
        required: true
        schema:
          type: string
        description: The ID of the prompt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mimeType:
                  type: string
                  example: video/mp4
              required:
              - mimeType
      responses:
        '200':
          description: Successful initiation of multipart upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploadId:
                    type: string
                    example: example-upload-id
                  key:
                    type: string
                    example: example-key
                  videoKey:
                    type: string
                    example: example-video-key
                  imageKey:
                    type: string
                    example: example-image-key
                  audioKey:
                    type: string
                    example: example-audio-key
                  thumbnailKey:
                    type: string
                    example: example-thumbnail-key
                  proxyKey:
                    type: string
                    example: example-proxy-key
                  momentId:
                    type: string
                    example: example-moment-id
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: mimeType is required
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
  /getTwynePrompts/{twyneId}:
    get:
      tags:
      - Prompts
      summary: Get twyne prompts by twyne ID
      description: Returns the prompts for a given twyne ID
      parameters:
      - in: path
        name: twyneId
        required: true
        schema:
          type: string
        description: The ID of the twyne to fetch prompts for
      responses:
        '200':
          description: Successfully retrieved twyneId prompts
        '401':
          description: Unauthorized, valid token is required
        '404':
          description: twyne not found
  /colloboration-stories/:
    get:
      tags:
      - Stories
      summary: Get collaboration stories by user ID
      description: Returns a list of stories where the user is a collaborator but not the creator.
      responses:
        '200':
          description: A JSON array of stories
        '401':
          description: Unauthorized - Invalid or expired token
        '404':
          description: Not Found - The specified user ID does not exist
  /twyne/render/{twyneId}:
    post:
      tags:
      - Twyne
      summary: Process Twyne
      operationId: processTwyne
      parameters:
      - name: twyneId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Twyne processing started
          content:
            text/plain:
              schema:
                type: string
                example: 'Processing Twyne'
  /stories/{id}:
    patch:
      tags:
      - Stories
      summary: Update a story
      description: This endpoint updates a story with the provided ID.
      parameters:
      - in: path
        name: id
        required: true
        description: The ID of the story to update.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                storyId:
                  type: string
                userId:
                  type: string
                storyline:
                  type: string
                edit:
                  type: string
                storylineTemplate:
                  type: string
                prompts:
                  type: array
                  items:
                    type: string
                coCreators:
                  type: array
                  items:
                    type: string
                contributors:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Story updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
        '500':
          description: Error updating the story
  /moments/publicPresign/{promptId}/:

    get:
      tags:
      - Moments
      summary: Generate pre-signed URLs for uploading media to a moment
      parameters:
      - in: path
        name: promptId
        required: true
        schema:
          type: string
        description: The ID of the prompt
      - in: query
        name: mimeType
        required: true
        schema:
          type: string
        description: The MIME type of the media to be uploaded
      responses:
        '200':
          description: Pre-signed URLs for uploading media
          content:
            application/json:
              schema:
                type: object
                properties:
                  audioUrl:
                    type: string
                    format: uri
                  videoUrl:
                    type: string
                    format: uri
                  imageUrl:
                    type: string
                    format: uri
        '400':
          description: Invalid MIME type
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Error generating pre-signed URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /twyne/getTwyneThumbnail/{twyneId}/:

    get:
      tags:
      - Twyne
      summary: Generate pre-signed URLs for uploading media to a moment
      parameters:
      - in: path
        name: twyneId
        required: true
        schema:
          type: string
        description: The ID of the twyne
      responses:
        '200':
          description: Pre-signed URLs for uploading media
          content:
            application/json:
              schema:
                type: object
                properties:
                  audioUrl:
                    type: string
                    format: uri
                  videoUrl:
                    type: string
                    format: uri
                  imageUrl:
                    type: string
                    format: uri
        '400':
          description: Invalid MIME type
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Error generating pre-signed URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /getTwynes:
    get:
      summary: Get a list of Twynes
      description: Retrieves a list of Twynes, optionally filtered by the user ID of the creator or contributors.
      operationId: getTwynes
      tags:
      - Twynes
      responses:
        '200':
          description: A JSON array of Twynes
          content:

        '500':
          description: Error fetching Twynes
  /directorChat:
    post:
      summary: Starts a new chat bot session
      operationId: startChatBotSession
      tags:
      - AI Director
      requestBody:
        description: User ID, message, and either storyId or twyneId
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                message:
                  type: string
                storyId:
                  type: string
                twyneId:
                  type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  threadId:
                    type: string
                  results:
                    type: array
                    items:
                      type: object
        '500':
          description: Error occurred during the run
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  error:
                    type: string
  /getUserConnections:
    get:
      tags:
      - Users
      summary: Get user connections
      description: This endpoint returns the connections of the authenticated user.
      responses:
        '200':
          description: A list of user connections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
  /streamingMoment/{momentId}:
    get:
      tags:
      - Streaming
      summary: Get a pre-signed URL for a moment by its moment ID
      parameters:
      - in: path
        name: momentId
        required: true
        schema:
          type: string
        description: The ID of the prompt
      responses:
        '200':
          description: A pre-signed URL for the moment
          content:
            application/json:
              schema:
                type: object
                properties:
                  presignedUrl:
                    type: string
        '404':
          description: Prompt or moment not found
        '500':
          description: Error in getMoment or Failed to get presigned URL
  /streamingPrompt/{promptId}:
    get:
      tags:
      - Streaming
      summary: Get a pre-signed URL for a moment by its prompt ID
      parameters:
      - in: path
        name: promptId
        required: true
        schema:
          type: string
        description: The ID of the prompt
      responses:
        '200':
          description: A pre-signed URL for the moment
          content:
            application/json:
              schema:
                type: object
                properties:
                  presignedUrl:
                    type: string
        '404':
          description: Prompt or moment not found
        '500':
          description: Error in getMoment or Failed to get presigned URL
  /streamingTwyne/{twyneId}:
    get:
      tags:
      - Streaming
      summary: Get a pre-signed URL for a twyne by its prompt ID
      parameters:
      - in: path
        name: twyneId
        required: true
        schema:
          type: string
        description: The ID of the twyne
      responses:
        '200':
          description: A pre-signed URL for the twyne
          content:
            application/json:
              schema:
                type: object
                properties:
                  presignedUrl:
                    type: string
        '404':
          description: twyneId or twyne not found
        '500':
          description: Error in getTwyne or Failed to get presigned URL
  /moments/{momentId}:
    get:
      tags:
      - Moments
      summary: Get a moment by its ID
      parameters:
      - in: path
        name: momentId
        required: true
        schema:
          type: string
        description: The ID of the moment
      responses:
        '200':
          description: A moment object and a pre-signed URL for its thumbnail
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  thumbnailUri:
                    type: string
                  presignedThumbnailUrl:
                    type: string
        '500':
          description: Error in getMoment or Failed to get presigned URL

  /moments/preSigned/{promptId}:
    get:
      tags:
      - Moments
      summary: Generate pre-signed URLs for audio and video files and update the moment with S3 URIs
      parameters:
      - name: promptId
        in: path
        required: true
        schema:
          type: string
      - name: mimeType
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Pre-signed URLs for audio and video files
          content:
            application/json:
              schema:
                type: object
                properties:
                  audioUrl:
                    type: string
                  videoUrl:
                    type: string
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /twyne/addUser:
    post:
      tags:
      - Twyne
      summary: Add multiple users to a Twyne
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                twyneId:
                  type: string
                  description: The ID of the Twyne
                contributors:
                  type: array
                  items:
                    type: string
                  description: The IDs or emails of the users to add
                userType:
                  type: string
                  description: The type of the users (either 'coCreator' or 'contributor')
              required:
              - twyneId
              - contributors
              - userType
      responses:
        '200':
          description: Users added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Users added successfully
        '400':
          description: Bad request (missing parameters or invalid userType)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Twyne not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /twyne/story/{storyId}:
    get:
      tags:
      - Twyne
      summary: List Twynes by Story ID
      description: This endpoint returns all Twynes associated with a given Story ID
      operationId: listByStoryId
      parameters:
      - name: storyId
        in: path
        description: ID of the Story to find Twynes for
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Twynes found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Twyne'
        '400':
          description: Bad request
        '404':
          description: Twynes not found
        '500':
          description: Server error
  /twyne:
    post:
      tags:
      - Twynes
      summary: Create a new Twyne
      description: This endpoint allows for the creation of a new Twyne
      operationId: createTwyne
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Twyne'
      responses:
        '200':
          description: Twyne created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Twyne'
        '400':
          description: Bad request
        '500':
          description: Server error

  /twyne/{id}:
    delete:
      tags:
      - Twynes
      summary: Delete a Twyne
      description: This endpoint allows for the deletion of a Twyne
      operationId: deleteTwyne
      parameters:
      - name: id
        in: path
        description: ID of the Twyne to delete
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Twyne deleted successfully
        '400':
          description: Bad request
        '404':
          description: Twyne not found
        '500':
          description: Server error
    get:
      tags:
      - Twynes
      summary: Find a Twyne by ID
      description: This endpoint returns a Twyne based on its ID
      operationId: findById
      parameters:
      - name: id
        in: path
        description: ID of the Twyne to find
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Twyne found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Twyne'
        '400':
          description: Bad request
        '404':
          description: Twyne not found
        '500':
          description: Server error
    patch:
      tags:
      - Twynes
      summary: Update a Twyne
      description: This endpoint allows for the updating of a Twyne
      operationId: updateTwyne
      parameters:
      - name: id
        in: path
        description: ID of the Twyne to update
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Twyne'
      responses:
        '200':
          description: Twyne updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Twyne'
        '400':
          description: Bad request
        '404':
          description: Twyne not found
        '500':
          description: Server error



  /changeEmail:
    post:
      tags:
      - Users
      summary: Initiates an email change process for a user
      description: This route is used to initiate an email change process for a user. The user will receive an email with a link to confirm the change.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newEmail:
                  type: string
                  format: email
      responses:
        '202':
          description: Verification email sent. Please check your new email to confirm the change.
        '400':
          description: Error message
  /addCoCreator:
    post:
      tags:
      - Users
      summary: Add a co-creator to a story
      operationId: addCoCreator
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - storyId
              - coCreators
              properties:
                storyId:
                  type: string
                  description: The ID of the story
                coCreators:
                  type: string
                  description: The ID of the user to add as a co-creator
      responses:
        '200':
          description: Co-creator added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Co-creator added successfully
        '400':
          description: Both storyId and userId are required
        '404':
          description: No story found with the provided storyId
        '500':
          description: Error adding a co-creator
  /changePassword:
    post:
      tags:
      - Users
      summary: Change user password
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - currentPassword
              - newPassword
              properties:
                currentPassword:
                  type: string
                  description: The current password of the user
                newPassword:
                  type: string
                  description: The new password of the user
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password updated successfully
        '400':
          description: Current password is incorrect
        '404':
          description: User not found
  /login:
    post:
      tags:
      - "Users"
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Login successful
        '400':
          description: Invalid credentials
        '404':
          description: User not found
        '500':
          description: Server error
  /logout:
    post:
      tags:
      - "Users"
      summary: User logout
      responses:
        '200':
          description: Logout successful
        '500':
          description: Server error

  /assignContributors:
    post:
      tags:
      - "Prompts"
      summary: Assign contributors to a prompt
      description: This endpoint allows you to assign one or more contributors to a prompt.
      operationId: assignContributors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                promptId:
                  type: string
                  description: The ID of the prompt to which contributors are to be assigned.
                contributors:
                  type: array
                  items:
                    type: string
                  description: An array of contributor IDs to be assigned to the prompt.
      responses:
        '200':
          description: Contributors assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contributors assigned successfully
                  result:
                    type: object
                    description: The result of the operation.
        '400':
          description: Bad request. User ID and contributors are required.
        '404':
          description: Prompt not found or contributors not assigned.
        '500':
          description: Internal server error.
  /uploadSaveMoment:
    get:
      tags:
      - "Moments"
      summary: "Save a moment"
      description: "This route is used to return a presigned URL and process the moment according to video settings."
      parameters:
      - in: query
        name: promptId
        required: true
        schema:
          type: string
          description: "ID of the prompt"
      - in: query
        name: videoUri
        required: true
        schema:
          type: string
          description: "URI of the video"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  presignedUrl:
                    type: string
                    description: "Presigned URL"
                  newMomentId:
                    type: string
                    description: "ID of the new moment"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Error message"
        500:
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Error message"
  /confirmMoment:
    get:
      tags:
      - "Moments"
      summary: "Confirm a moment"
      description: "This route is used to save the moment to the prompt and sets collected to true."
      parameters:
      - in: query
        name: promptId
        required: true
        schema:
          type: string
          description: "ID of the prompt"
      - in: query
        name: momentId
        required: true
        schema:
          type: string
          description: "ID of the new moment"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message"
        500:
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Error message"
  /moments/{id}:
    delete:
      tags:
      - "Moments"
      summary: "Delete a moment"
      description: "This route is used to delete a moment."
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          description: "ID of the moment to delete"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message"
        404:
          description: "Moment not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Error message"
        500:
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Error message"
  /getAllMoments:
    get:
      tags:
      - "Moments"
      summary: "List all moments"
      description: "This route is used to list all moments."
      responses:
        201:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Moment'
        400:
          description: "Invalid input, object invalid"
        500:
          description: "An error occurred while creating the moment"
  /assistants/userInput:
    post:
      tags:
      - "Twyne Director"
      summary: "Handle user input"
      description: "This route is used to handle user input, process it, and respond with the Moment Director."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: "User input message"
                storyId:
                  type: string
                  description: "ID of the story"
                templateName:
                  type: string
                  description: "Name of the template"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: "Error processing user input"

  /getAllPrompts:
    get:
      tags:
      - Prompts
      summary: Get all prompts
      responses:
        '200':
          description: Prompts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prompt'

  /setPromptCollected/{promptId}/{status}:
    post:
      tags:
      - Prompts
      summary: Set collected status of a prompt
      operationId: setPromptCollected
      parameters:
      - name: promptId
        in: path
        required: true
        schema:
          type: string
      - name: status
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Prompt collected status set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /prompts:
    get:
      tags:
      - Prompts
      summary: Get all prompts
      responses:
        '200':
          description: Prompts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prompt'
    post:
      tags:
      - Prompts
      summary: Create a new prompt
      operationId: createPrompt
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prompt'
      responses:
        '201':
          description: Prompt created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  createPrompt:
                    $ref: '#/components/schemas/Prompt'
        '500':
          description: Error creating a new prompt
  /prompts/{id}:
    get:
      tags:
      - Prompts
      summary: Retrieve a prompt by ID with selective fields
      description: Fetch a single prompt with the option to select specific fields in the response.
      security:
      - BearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The unique identifier for the prompt.
      - in: query
        name: fields
        required: false
        schema:
          type: string
        description: order, storyId, prompt, momentId, mediaType, promptTitle, collected, primers.
      responses:
        '200':
          description: A single prompt object with selective fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        '400':
          description: Bad request when invalid fields are specified.
        '404':
          description: A prompt with the specified ID was not found.
    delete:
      tags:
      - Prompts
      summary: Delete a prompt by ID
      description: Delete a single prompt by its unique identifier.
      security:
      - BearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The unique identifier for the prompt.
      responses:
        '200':
          description: Prompt deleted successfully.
        '400':
          description: Bad request when invalid ID is specified.
        '404':
          description: A prompt with the specified ID was not found.
    patch:
      tags:
      - Prompts
      summary: Update a prompt by ID
      description: Update a single prompt by its unique identifier.
      security:
      - BearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The unique identifier for the prompt.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              schema:
                $ref: '#/components/schemas/Prompt'
      responses:
        '200':
          description: Prompt updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        '400':
          description: Bad request when invalid ID or data is specified.
        '404':
          description: A prompt with the specified ID was not found.
  /stories:
    get:
      summary: Get a list of stores by users
      operationId: getStories
      tags:
      - Stories
      security:
      - BearerAuth: []
      responses:
        '200':
          description: A specific story
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStories'
        '401':
          description: Unauthorized
        '404':
          description: Story not found
  /createStory:
    post:
      tags:
      - Stories
      summary: Create a new story
      description: Creates a new story with the given details.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                storyName:
                  type: string
                  description: The name of the story.
                defaultVideoSettings:
                  type: object
                  description: The default video settings for the story.
                  properties:
                    orientation:
                      type: string
                      description: The default orientation of the video.
                    quality:
                      type: string
                      description: The default quality of the video.
                defaultTemplate:
                  type: string
                  description: The default template for the story.
      responses:
        '201':
          description: Story created
          content:
            application/json:

  /getStorylinePrompts/{StorylineId}:
    get:
      summary: Retrieve multiple prompts by storylineId with selective fields
      operationId: findPromptsByStorylineId
      tags:
      - Prompts
      description: Fetch prompts associated with a specific storylineId, with an option to select specific fields in the response.
      parameters:
      - in: query
        name: storylineId
        required: true
        schema:
          type: string
        description: The unique identifier for the storyline.
      - in: query
        name: fields
        required: false
        schema:
          type: string
        description: Comma-separated list of fields to include in the response. Available fields include order, storyName, prompt, momentId, mediaType, promptTitle, collected, primers.
      responses:
        '200':
          description: An array of prompt objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prompt'
        '400':
          description: Bad request. Possible reasons invalid storylineId or fields format.
        '404':
          description: No prompts found for the provided storylineId.
  /stories/{storyId}:
    parameters:
    - in: path
      name: storyId
      required: true
      schema:
        type: string
        format: oid # Custom format to indicate an ObjectId
      description: The ID of the story to fetch or delete.
    get:
      tags:
      - Stories
      summary: Get a single story
      description: Returns details of a specific story by ID.
      responses:
        '200':
          description: A single story
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
    delete:
      tags:
      - Stories
      summary: Delete a story
      description: Deletes a specific story by ID.
      responses:
        '204':
          description: Story deleted

  /refreshToken:
    post:
      tags:
      - Users
      summary: Refresh user's token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
      responses:
        '200':
          description: Access token successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '401':
          description: Unauthorized, token is null
        '403':
          description: Forbidden, token verification failed
  /users:
    post:
      tags:
      - Users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      tags:
      - Users
      summary: Update a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:

        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/:
    get:
      tags:
      - Users
      summary: Find a single user
      responses:
        '200':
          description: User found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      tags:
      - Users
      summary: Delete a user
      responses:
        '204':
          description: User deleted successfully

components:
  securitySchemes:
    BearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for
  schemas:
    schemas:
    TwyneConfig:
      type: object
      properties:
        storylineId:
          type: string
        twyneQuality:
          type: string
        twyneOrientation:
          type: string
        music:
          type: string
        twyneId:
          type: string
        title:
          type: string
        outro:
          type: string
        trackName:
          type: string
        crossfadeSettings:
          type: array
          items:
            type: object
            properties:
              partType:
                type: string
              crossfadeDuration:
                type: number
              offsetInterval:
                type: number
    Twyne:
      type: object
      properties:
        _id:
          type: string
          format: ObjectId
          description: The unique identifier for the Twyne
        storyId:
          type: string
          format: ObjectId
          description: The identifier for the story
        prompts:
          type: array
          items:
            type: string
            format: ObjectId
          description: The identifiers for the prompts
        owner:
          type: string
          format: ObjectId
          description: The identifier for the owner
        coCreators:
          type: array
          items:
            type: string
            format: ObjectId
          description: The identifiers for the co-creators
        contributors:
          type: array
          items:
            type: string
            format: ObjectId
          description: The identifiers for the contributors
        storyline:
          type: string
          format: ObjectId
          description: The identifier for the storyline
        edit:
          type: string
          format: ObjectId
          description: The identifier for the edit
        storylineTemplate:
          type: string
          format: ObjectId
          description: The identifier for the storyline template
    Moment:
      type: object
      properties:
        _id:
          type: object
          properties:
            $oid:
              type: string
              description: The unique identifier for the moment.
        associatedPromptId:
          type: string
          description: The associated prompt ID for the moment.
        audioUri:
          type: string
          description: The audio URI for the moment.
        beatTag:
          type: string
          description: The beat tag for the moment.
        createdAt:
          type: string
          description: The creation time for the moment.
        filename:
          type: string
          description: The filename for the moment.
        s3ProcessedUri:
          type: array
          items:
            type: object
            properties:
              s3ProcessedUri:
                type: string
                description: The processed URI for the moment.
              videoSettings:
                type: string
                description: The video settings for the moment.
        s3FilePath:
          type: string
          description: The file path for the moment.
        s3Uri:
          type: string
          description: The URI for the moment.
        s3UriThumbnail:
          type: string
          description: The thumbnail URI for the moment.
        sentiment:
          type: string
          description: The sentiment for the moment.
        thumbnail:
          type: string
          description: The thumbnail for the moment.
        thumbnailUrl:
          type: string
          description: The thumbnail URL for the moment.
        transcription:
          type: string
          description: The transcription for the moment.
        transcriptionUrl:
          type: string
          description: The transcription URL for the moment.
        videoUri:
          type: string
          description: The video URI for the moment.
        webmFilePath:
          type: string
          description: The webm file path for the moment.
        pictureUri:
          type: string
          description: The picture URI for the moment.
        mediaType:
          type: string
          description: The media type for the moment.
        storylineId:
          type: string
          description: The storyline ID for the moment.
    GetStories:
      type: object
      properties:
        _id:
          type: object
          properties:
            $oid:
              type: string
              description: The unique identifier for the story.
        storyName:
          type: string
          description: The name of the story.
        threadId:
          type: string
          description: The thread ID associated with the story.
    UserRegistration:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required:
      - username
      - email
      - password
    User:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
          description: The user's username
          example: "exampleUser"
        email:
          type: string
          description: The user's email
          example: "exampleUser@example.com"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        profile:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            avatarUrl:
              type: string
            bio:
              type: string
        settings:
          type: object
          properties:
            notifications:
              type: object
              properties:
                email:
                  type: boolean
                push:
                  type: boolean
        status:
          type: string
        roles:
          type: array
          items:
            type: string
      required:
      - username
      - email
      - salt
    Login:
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
          description: The user's username
        password:
          type: string
          description: The user's password
    Prompt:
      type: object
      properties:
        created:
          type: string
          format: date-time
        order:
          type: integer
        storyId:
          type: string
        prompt:
          type: string
        momentId:
          type: string
        mediaType:
          type: string
        promptTitle:
          type: string
        collected:
          type: boolean
        primers:
          type: array
          items:
            type: string
        conntributors:
          type: array
          items:
            type: string
    AIResponse:
      type: object
      properties:
        message:
          type: string
      required:
      - message
      - storyId
      - templateName
    AccessToken:
      type: object
      properties:
        accessToken:
          type: string
          description: The refreshed access token
    Token:
      type: object
      properties:
        token:
          type: string
          description: The refresh token


security:
- BearerAuth: []

